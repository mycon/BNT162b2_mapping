import copy,csv
from collections import OrderedDict
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

# Use Harry Harpel's static map to get Bias values for certain codons
USE_HH_BIAS = 1
hh_map = {"ATG": "ATG", "TTT": "TTC", "GTT": "GTG", "CTT": "CTG", "TTA": "CTG", "TTG": "CTG", "CCA": "CCC", "CTA": "CTG", "GTC": "GTG", "TCT": "AGC", "AGT": "AGC", "CAG": "CAG", "TGT": "TGC", "AAT": "AAC", "ACA": "ACC", "ACC": "ACC", "AGA": "AGA", "ACT": "ACC", "CAA": "CAG", "CCC": "CCC", "CCT": "CCT", "GCA": "GCC", "TAC": "TAC", "TTC": "TTC", "CGT": "AGA", "GGT": "GGC", "TAT": "TAC", "GAC": "GAC", "AAA": "AAG", "TCC": "AGC", "TCA": "AGC", "CAT": "CAC", "TGG": "TGG", "GCT": "GCC", "ATA": "ATC", "GGG": "GGA", "AAG": "AAG", "AGG": "CGG", "GAT": "GAC", "AAC": "AAC", "GAG": "GAG", "GGC": "GGC", "ATT": "ATC", "TCG": "AGC", "GAA": "GAG", "CAC": "CAC", "GCG": "GCC", "TGC": "TGC", "GGA": "GGC", "GTG": "GTG", "ACG": "ACC", "CTC": "CTG", "GTA": "GTG", "ATC": "ATC", "GCC": "GCC", "AGC": "AGC", "CTG": "CTG", "CGG": "CGG", "CGC": "CGG", "TAA": "TGA"}
codon_bias_table = {}
for k,v in hh_map.items():
    if k != v:
        if v in codon_bias_table:
            codon_bias_table[v] += 1
        else:
            codon_bias_table[v] = 1


# From https://www.biostars.org/p/2903/  assume correct
c2a = {
    "TTT": "F", "TTC": "F", "TTA": "L", "TTG": "L",
    "TCT": "S", "TCC": "S", "TCA": "S", "TCG": "S",
    "TAT": "Y", "TAC": "Y", "TAA": "STOP", "TAG": "STOP",
    "TGT": "C", "TGC": "C", "TGA": "STOP", "TGG": "W",
    "CTT": "L", "CTC": "L", "CTA": "L", "CTG": "L",
    "CCT": "P", "CCC": "P", "CCA": "P", "CCG": "P",
    "CAT": "H", "CAC": "H", "CAA": "Q", "CAG": "Q",
    "CGT": "R", "CGC": "R", "CGA": "R", "CGG": "R",
    "ATT": "I", "ATC": "I", "ATA": "I", "ATG": "M",
    "ACT": "T", "ACC": "T", "ACA": "T", "ACG": "T",
    "AAT": "N", "AAC": "N", "AAA": "K", "AAG": "K",
    "AGT": "S", "AGC": "S", "AGA": "R", "AGG": "R",
    "GTT": "V", "GTC": "V", "GTA": "V", "GTG": "V",
    "GCT": "A", "GCC": "A", "GCA": "A", "GCG": "A",
    "GAT": "D", "GAC": "D", "GAA": "E", "GAG": "E",
    "GGT": "G", "GGC": "G", "GGA": "G", "GGG": "G",
}

nucs = 'ACGTU'



def c_stats_init():
    stats = {}

    # Files from
    # https://hive.biochemistry.gwu.edu/dna.cgi?cmd=tissue_codon_usage&id=586358&mode=cocoputs
    # Use 9606 - Human Codon pair table
    bicod = pd.read_csv("Human_Bicod_avg.tsv", sep='\t')

    s_count = 0
    for k0 in c2a.keys():
        stats[k0] = {}
        s = stats[k0]
        for k, v in c2a.items():
            if not v in s:
                s[v]= {}
            dualc = k0 + k
            #Fill in the counts from the bi-codon occurance data
            count = bicod[dualc].values[0] if dualc in bicod else 0
            if USE_HH_BIAS and k in codon_bias_table:
                # This adds ~ 1% to our codon matching
                count = (1 + .1 * codon_bias_table[k]) * count
                pass
            s[v][k] = {'count': count,
                       'prob': 0}
        k0_count = 0
        #Compute totals and probabilities for Codon state transitions
        for v in s:
            p_count = 0
            for c in s[v]:
                p_count += s[v][c]['count']
            for cod in s[v]:
                s[v][cod]['prob'] = s[v][cod]['count']/p_count
            s[v]['a_tot'] = p_count
            k0_count += p_count

        #Compute state to amino-acid probabilities
        for v in s:
            s[v]['a_prob'] = s[v]['a_tot']/k0_count

        s['s_tot'] = k0_count
        s_count += k0_count

    #Statistics for each state
    for k0 in stats:
        stats[k0]['s_prob'] = stats[k0]['s_tot']/s_count

    return stats


class Viterbi:
    class VitStateNodes(OrderedDict):
        class VitState(AttrDict):
            def __init__(self, this_state):
                self.this_state = this_state
                self.prev_state = ''
                self.path_metric = 0
                self.path_prob = 0
                self.aa_prob = 0

            def update(self, prev_state, path_metric, path_prob, aa_prob):
                if path_metric > self.path_metric:
                    self.prev_state = prev_state
                    self.path_metric = path_metric
                    self.path_prob = path_prob
                    self.aa_prob = aa_prob

        def __init__(self, state_list):
            OrderedDict.__init__(self)
            for s in state_list:
                if '_' in s:
                    continue
                self[s] = self.VitState(s)

        def max(self):
            '''Returns key with highest branch metric '''
            mv=0
            mk=''
            for k, v in self.items():
                if v.path_metric > mv:
                    mv = v.path_metric
                    mk = k
            return mk


    def __init__(self, trans_probs):
        self.stats = trans_probs
        self.trellis = []
        self.trellis_prob = []

    def add_state(self, state, p):
        self.trellis.append(state)
        self.trellis_prob.append(p)

    def add_sequence(self, seq):
        seq = seq.replace('\n', '')
        codon_seq = [seq[i:i + 3] for i in range(0, len(seq), 3)]
        pvs = None
        aprob = 1
        for c in codon_seq:
            #Get all states for current aa
            aa = c2a[c]
            state_list = self.stats[c][aa].keys()
            vs = self.VitStateNodes(state_list)

            if pvs:
                aprob = 0
                for k0,v0 in pvs.items():
                    states = self.stats[k0][aa]
                    sprob = states['a_prob']

                    # A rough metric that this aa is correct and not an error.
                    aprob = max(aprob, sprob)

                    for k1,v1 in states.items():
                        if '_' in k1:
                            continue

                        p = states[k1]['prob']
                        # weighting the path metric by how likely the transition to this AA is probably wrong, but try it out
                        pw = states[k1]['prob'] #* sprob
                        vs[k1].update(k0, v0.path_metric+pw, p, sprob)

            self.add_state(vs, aprob)
            pvs = vs
        pass

    def backtrace(self):
        tb = []
        tp = []
        ps = self.trellis[-1].max()
        for vsn in reversed(self.trellis):
            tb.append(ps)
            tp.append(vsn[ps].aa_prob)
            ps = vsn[ps].prev_state

        tb.reverse()
        tp.reverse()
        self.bt_prob = tp
        self.should_replace = ''
        for x in self.bt_prob:
            self.should_replace += ' *  ' if x > 0 and x < .018 else '    '

        return ''.join(tb)

def compare_seq(a, b, f):
    l1 = len(a)
    l2 = len(b)
    cl = min(l1, l2)
    cc = 0
    cc_m = False
    c_mis_count = 0
    n_mis_count = 0
    codon_mismatch = ''
    mismatches = ''
    for pos in range(0, cl):
        if a[pos] != b[pos]:
            cc_m = True
            mismatches += '|'
            n_mis_count += 1
        else:
            mismatches += ' '
        cc += 1
        if cc == 3:
            if cc_m:
                c_mis_count += 1
                codon_mismatch += ' *  '
            else:
                codon_mismatch += '    '
            mismatches += ' '
            cc_m = False
            cc = 0

    a_seq = [a[i:i + 3] for i in range(0, l1, 3)]
    a_aa = []
    b_seq = [b[i:i + 3] for i in range(0, l2, 3)]
    b_aa = []
    a_mis = ''
    for x in a_seq:
        a_aa.append(c2a[x])
    for x in b_seq:
        b_aa.append(c2a[x])
    for pos in range(cl//3):
        if a_aa[pos] != b_aa[pos]:
            a_mis += ' |  '
        else:
            a_mis += '    '


    print(' '.join(a_seq), file=f)
    print(mismatches, file=f)
    print(' '.join(b_seq), file=f)
    print(' '.join([" {} ".format(y) for y in a_aa]), file=f)
    print(a_mis, file=f)
    print(' '.join([" {} ".format(y) for y in b_aa]), file=f)
    nmatch = (cl - n_mis_count)/cl * 100
    cmatch = ((cl//3) - c_mis_count)/(cl//3) *100
    print("Len a:{} b:{}".format(l1, l2), file=f)
    print("Codon Match {:.2f}  Nucleotide Match {:.2f} \n\n".format(cmatch, nmatch), file=f)


cov19 = '''
ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACCAGAACTCAAT
TACCCCCTGCATACACTAATTCTTTCACACGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCAGT
TTTACATTCAACTCAGGACTTGTTCTTACCTTTCTTTTCCAATGTTACTTGGTTCCATGCTATACATGTC
TCTGGGACCAATGGTACTAAGAGGTTTGATAACCCTGTCCTACCATTTAATGATGGTGTTTATTTTGCTT
CCACTGAGAAGTCTAACATAATAAGAGGCTGGATTTTTGGTACTACTTTAGATTCGAAGACCCAGTCCCT
ACTTATTGTTAATAACGCTACTAATGTTGTTATTAAAGTCTGTGAATTTCAATTTTGTAATGATCCATTT
TTGGGTGTTTATTACCACAAAAACAACAAAAGTTGGATGGAAAGTGAGTTCAGAGTTTATTCTAGTGCGA
ATAATTGCACTTTTGAATATGTCTCTCAGCCTTTTCTTATGGACCTTGAAGGAAAACAGGGTAATTTCAA
AAATCTTAGGGAATTTGTGTTTAAGAATATTGATGGTTATTTTAAAATATATTCTAAGCACACGCCTATT
AATTTAGTGCGTGATCTCCCTCAGGGTTTTTCGGCTTTAGAACCATTGGTAGATTTGCCAATAGGTATTA
ACATCACTAGGTTTCAAACTTTACTTGCTTTACATAGAAGTTATTTGACTCCTGGTGATTCTTCTTCAGG
TTGGACAGCTGGTGCTGCAGCTTATTATGTGGGTTATCTTCAACCTAGGACTTTTCTATTAAAATATAAT
GAAAATGGAACCATTACAGATGCTGTAGACTGTGCACTTGACCCTCTCTCAGAAACAAAGTGTACGTTGA
AATCCTTCACTGTAGAAAAAGGAATCTATCAAACTTCTAACTTTAGAGTCCAACCAACAGAATCTATTGT
TAGATTTCCTAATATTACAAACTTGTGCCCTTTTGGTGAAGTTTTTAACGCCACCAGATTTGCATCTGTT
TATGCTTGGAACAGGAAGAGAATCAGCAACTGTGTTGCTGATTATTCTGTCCTATATAATTCCGCATCAT
TTTCCACTTTTAAGTGTTATGGAGTGTCTCCTACTAAATTAAATGATCTCTGCTTTACTAATGTCTATGC
AGATTCATTTGTAATTAGAGGTGATGAAGTCAGACAAATCGCTCCAGGGCAAACTGGAAAGATTGCTGAT
TATAATTATAAATTACCAGATGATTTTACAGGCTGCGTTATAGCTTGGAATTCTAACAATCTTGATTCTA
AGGTTGGTGGTAATTATAATTACCTGTATAGATTGTTTAGGAAGTCTAATCTCAAACCTTTTGAGAGAGA
TATTTCAACTGAAATCTATCAGGCCGGTAGCACACCTTGTAATGGTGTTGAAGGTTTTAATTGTTACTTT
CCTTTACAATCATATGGTTTCCAACCCACTAATGGTGTTGGTTACCAACCATACAGAGTAGTAGTACTTT
CTTTTGAACTTCTACATGCACCAGCAACTGTTTGTGGACCTAAAAAGTCTACTAATTTGGTTAAAAACAA
ATGTGTCAATTTCAACTTCAATGGTTTAACAGGCACAGGTGTTCTTACTGAGTCTAACAAAAAGTTTCTG
CCTTTCCAACAATTTGGCAGAGACATTGCTGACACTACTGATGCTGTCCGTGATCCACAGACACTTGAGA
TTCTTGACATTACACCATGTTCTTTTGGTGGTGTCAGTGTTATAACACCAGGAACAAATACTTCTAACCA
GGTTGCTGTTCTTTATCAGGATGTTAACTGCACAGAAGTCCCTGTTGCTATTCATGCAGATCAACTTACT
CCTACTTGGCGTGTTTATTCTACAGGTTCTAATGTTTTTCAAACACGTGCAGGCTGTTTAATAGGGGCTG
AACATGTCAACAACTCATATGAGTGTGACATACCCATTGGTGCAGGTATATGCGCTAGTTATCAGACTCA
GACTAATTCTCCTCGGCGGGCACGTAGTGTAGCTAGTCAATCCATCATTGCCTACACTATGTCACTTGGT
GCAGAAAATTCAGTTGCTTACTCTAATAACTCTATTGCCATACCCACAAATTTTACTATTAGTGTTACCA
CAGAAATTCTACCAGTGTCTATGACCAAGACATCAGTAGATTGTACAATGTACATTTGTGGTGATTCAAC
TGAATGCAGCAATCTTTTGTTGCAATATGGCAGTTTTTGTACACAATTAAACCGTGCTTTAACTGGAATA
GCTGTTGAACAAGACAAAAACACCCAAGAAGTTTTTGCACAAGTCAAACAAATTTACAAAACACCACCAA
TTAAAGATTTTGGTGGTTTTAATTTTTCACAAATATTACCAGATCCATCAAAACCAAGCAAGAGGTCATT
TATTGAAGATCTACTTTTCAACAAAGTGACACTTGCAGATGCTGGCTTCATCAAACAATATGGTGATTGC
CTTGGTGATATTGCTGCTAGAGACCTCATTTGTGCACAAAAGTTTAACGGCCTTACTGTTTTGCCACCTT
TGCTCACAGATGAAATGATTGCTCAATACACTTCTGCACTGTTAGCGGGTACAATCACTTCTGGTTGGAC
CTTTGGTGCAGGTGCTGCATTACAAATACCATTTGCTATGCAAATGGCTTATAGGTTTAATGGTATTGGA
GTTACACAGAATGTTCTCTATGAGAACCAAAAATTGATTGCCAACCAATTTAATAGTGCTATTGGCAAAA
TTCAAGACTCACTTTCTTCCACAGCAAGTGCACTTGGAAAACTTCAAGATGTGGTCAACCAAAATGCACA
AGCTTTAAACACGCTTGTTAAACAACTTAGCTCCAATTTTGGTGCAATTTCAAGTGTTTTAAATGATATC
CTTTCACGTCTTGACAAAGTTGAGGCTGAAGTGCAAATTGATAGGTTGATCACAGGCAGACTTCAAAGTT
TGCAGACATATGTGACTCAACAATTAATTAGAGCTGCAGAAATCAGAGCTTCTGCTAATCTTGCTGCTAC
TAAAATGTCAGAGTGTGTACTTGGACAATCAAAAAGAGTTGATTTTTGTGGAAAGGGCTATCATCTTATG
TCCTTCCCTCAGTCAGCACCTCATGGTGTAGTCTTCTTGCATGTGACTTATGTCCCTGCACAAGAAAAGA
ACTTCACAACTGCTCCTGCCATTTGTCATGATGGAAAAGCACACTTTCCTCGTGAAGGTGTCTTTGTTTC
AAATGGCACACACTGGTTTGTAACACAAAGGAATTTTTATGAACCACAAATCATTACTACAGACAACACA
TTTGTGTCTGGTAACTGTGATGTTGTAATAGGAATTGTCAACAACACAGTTTATGATCCTTTGCAACCTG
AATTAGACTCATTCAAGGAGGAGTTAGATAAATATTTTAAGAATCATACATCACCAGATGTTGATTTAGG
TGACATCTCTGGCATTAATGCTTCAGTTGTAAACATTCAAAAAGAAATTGACCGCCTCAATGAGGTTGCC
AAGAATTTAAATGAATCTCTCATCGATCTCCAAGAACTTGGAAAGTATGAGCAGTATATAAAATGGCCAT
GGTACATTTGGCTAGGTTTTATAGCTGGCTTGATTGCCATAGTAATGGTGACAATTATGCTTTGCTGTAT
GACCAGTTGCTGTAGTTGTCTCAAGGGCTGTTGTTCTTGTGGATCCTGCTGCAAATTTGATGAAGACGAC
TCTGAGCCAGTGCTCAAAGGAGTCAAATTACATTACACATAA
'''

BNT162b2 = '''
ATGTTCGTGTTCCTGGTGCTGCTGCCTCTGGTGTCCAGCCAGTGTG
TGAACCTGACCACCAGAACACAGCTGCCTCCAGCCTACACCAACAGCTTT
ACCAGAGGCGTGTACTACCCCGACAAGGTGTTCAGATCCAGCGTGCTGCA
CTCTACCCAGGACCTGTTCCTGCCTTTCTTCAGCAACGTGACCTGGTTCC
ACGCCATCCACGTGTCCGGCACCAATGGCACCAAGAGATTCGACAACCCC
GTGCTGCCCTTCAACGACGGGGTGTACTTTGCCAGCACCGAGAAGTCCAA
CATCATCAGAGGCTGGATCTTCGGCACCACACTGGACAGCAAGACCCAGA
GCCTGCTGATCGTGAACAACGCCACCAACGTGGTCATCAAAGTGTGCGAG
TTCCAGTTCTGCAACGACCCCTTCCTGGGCGTCTACTACCACAAGAACAA
CAAGAGCTGGATGGAAAGCGAGTTCCGGGTGTACAGCAGCGCCAACAACT
GCACCTTCGAGTACGTGTCCCAGCCTTTCCTGATGGACCTGGAAGGCAAG
CAGGGCAACTTCAAGAACCTGCGCGAGTTCGTGTTTAAGAACATCGACGG
CTACTTCAAGATCTACAGCAAGCACACCCCTATCAACCTCGTGCGGGATC
TGCCTCAGGGCTTCTCTGCTCTGGAACCCCTGGTGGATCTGCCCATCGGC
ATCAACATCACCCGGTTTCAGACACTGCTGGCCCTGCACAGAAGCTACCT
GACACCTGGCGATAGCAGCAGCGGATGGACAGCTGGTGCCGCCGCTTACT
ATGTGGGCTACCTGCAGCCTAGAACCTTCCTGCTGAAGTACAACGAGAAC
GGCACCATCACCGACGCCGTGGATTGTGCTCTGGATCCTCTGAGCGAGAC
AAAGTGCACCCTGAAGTCCTTCACCGTGGAAAAGGGCATCTACCAGACCA
GCAACTTCCGGGTGCAGCCCACCGAATCCATCGTGCGGTTCCCCAATATC
ACCAATCTGTGCCCCTTCGGCGAGGTGTTCAATGCCACCAGATTCGCCTC
TGTGTACGCCTGGAACCGGAAGCGGATCAGCAATTGCGTGGCCGACTACT
CCGTGCTGTACAACTCCGCCAGCTTCAGCACCTTCAAGTGCTACGGCGTG
TCCCCTACCAAGCTGAACGACCTGTGCTTCACAAACGTGTACGCCGACAG
CTTCGTGATCCGGGGAGATGAAGTGCGGCAGATTGCCCCTGGACAGACAG
GCAAGATCGCCGACTACAACTACAAGCTGCCCGACGACTTCACCGGCTGT
GTGATTGCCTGGAACAGCAACAACCTGGACTCCAAAGTCGGCGGCAACTA
CAATTACCTGTACCGGCTGTTCCGGAAGTCCAATCTGAAGCCCTTCGAGC
GGGACATCTCCACCGAGATCTATCAGGCCGGCAGCACCCCTTGTAACGGC
GTGGAAGGCTTCAACTGCTACTTCCCACTGCAGTCCTACGGCTTTCAGCC
CACAAATGGCGTGGGCTATCAGCCCTACAGAGTGGTGGTGCTGAGCTTCG
AACTGCTGCATGCCCCTGCCACAGTGTGCGGCCCTAAGAAAAGCACCAAT
CTCGTGAAGAACAAATGCGTGAACTTCAACTTCAACGGCCTGACCGGCAC
CGGCGTGCTGACAGAGAGCAACAAGAAGTTCCTGCCATTCCAGCAGTTTG
GCCGGGATATCGCCGATACCACAGACGCCGTTAGAGATCCCCAGACACTG
GAAATCCTGGACATCACCCCTTGCAGCTTCGGCGGAGTGTCTGTGATCAC
CCCTGGCACCAACACCAGCAATCAGGTGGCAGTGCTGTACCAGGACGTGA
ACTGTACCGAAGTGCCCGTGGCCATTCACGCCGATCAGCTGACACCTACA
TGGCGGGTGTACTCCACCGGCAGCAATGTGTTTCAGACCAGAGCCGGCTG
TCTGATCGGAGCCGAGCACGTGAACAATAGCTACGAGTGCGACATCCCCA
TCGGCGCTGGAATCTGCGCCAGCTACCAGACACAGACAAACAGCCCTCGG
AGAGCCAGAAGCGTGGCCAGCCAGAGCATCATTGCCTACACAATGTCTCT
GGGCGCCGAGAACAGCGTGGCCTACTCCAACAACTCTATCGCTATCCCCA
CCAACTTCACCATCAGCGTGACCACAGAGATCCTGCCTGTGTCCATGACC
AAGACCAGCGTGGACTGCACCATGTACATCTGCGGCGATTCCACCGAGTG
CTCCAACCTGCTGCTGCAGTACGGCAGCTTCTGCACCCAGCTGAATAGAG
CCCTGACAGGGATCGCCGTGGAACAGGACAAGAACACCCAAGAGGTGTTC
GCCCAAGTGAAGCAGATCTACAAGACCCCTCCTATCAAGGACTTCGGCGG
CTTCAATTTCAGCCAGATTCTGCCCGATCCTAGCAAGCCCAGCAAGCGGA
GCTTCATCGAGGACCTGCTGTTCAACAAAGTGACACTGGCCGACGCCGGC
TTCATCAAGCAGTATGGCGATTGTCTGGGCGACATTGCCGCCAGGGATCT
GATTTGCGCCCAGAAGTTTAACGGACTGACAGTGCTGCCTCCTCTGCTGA
CCGATGAGATGATCGCCCAGTACACATCTGCCCTGCTGGCCGGCACAATC
ACAAGCGGCTGGACATTTGGAGCAGGCGCCGCTCTGCAGATCCCCTTTGC
TATGCAGATGGCCTACCGGTTCAACGGCATCGGAGTGACCCAGAATGTGC
TGTACGAGAACCAGAAGCTGATCGCCAACCAGTTCAACAGCGCCATCGGC
AAGATCCAGGACAGCCTGAGCAGCACAGCAAGCGCCCTGGGAAAGCTGCA
GGACGTGGTCAACCAGAATGCCCAGGCACTGAACACCCTGGTCAAGCAGC
TGTCCTCCAACTTCGGCGCCATCAGCTCTGTGCTGAACGATATCCTGAGC
AGACTGGACCCTCCTGAGGCCGAGGTGCAGATCGACAGACTGATCACAGG
CAGACTGCAGAGCCTCCAGACATACGTGACCCAGCAGCTGATCAGAGCCG
CCGAGATTAGAGCCTCTGCCAATCTGGCCGCCACCAAGATGTCTGAGTGT
GTGCTGGGCCAGAGCAAGAGAGTGGACTTTTGCGGCAAGGGCTACCACCT
GATGAGCTTCCCTCAGTCTGCCCCTCACGGCGTGGTGTTTCTGCACGTGA
CATATGTGCCCGCTCAAGAGAAGAATTTCACCACCGCTCCAGCCATCTGC
CACGACGGCAAAGCCCACTTTCCTAGAGAAGGCGTGTTCGTGTCCAACGG
CACCCATTGGTTCGTGACACAGCGGAACTTCTACGAGCCCCAGATCATCA
CCACCGACAACACCTTCGTGTCTGGCAACTGCGACGTCGTGATCGGCATT
GTGAACAATACCGTGTACGACCCTCTGCAGCCCGAGCTGGACAGCTTCAA
AGAGGAACTGGACAAGTACTTTAAGAACCACACAAGCCCCGACGTGGACC
TGGGCGATATCAGCGGAATCAATGCCAGCGTCGTGAACATCCAGAAAGAG
ATCGACCGGCTGAACGAGGTGGCCAAGAATCTGAACGAGAGCCTGATCGA
CCTGCAAGAACTGGGGAAGTACGAGCAGTACATCAAGTGGCCCTGGTACA
TCTGGCTGGGCTTTATCGCCGGACTGATTGCCATCGTGATGGTCACAATC
ATGCTGTGTTGCATGACCAGCTGCTGTAGCTGCCTGAAGGGCTGTTGTAG
CTGTGGCAGCTGCTGCAAGTTCGACGAGGACGATTCTGAGCCCGTGCTGA
AGGGCGTGAAACTGCACTACACATGA
'''

cov19 = cov19.replace('\n', '')
BNT162b2 = BNT162b2.replace('\n', '')
myStats = c_stats_init()

vit = Viterbi(myStats)
vit.add_sequence(cov19)
mine = vit.backtrace()
tp = np.asarray(vit.bt_prob)

#Copy of output sequence with and without global USE_HH_BIAS
#Codon Match 77.47  Nucleotide Match 90.58
mine_with_bias = '''
ATGTTCGTGTTCCTGGTGCTGCTGCCCCTGGTGAGCAGCCAGTGCGTGAACCTGACCACCCGGACCCAGCTGCCCCCAGCCTACACCAACAGCTTCACCCGGGGCGTGTACTACCCCGACAAGGTGTTCCGGAGCAGCGTGCTGCACAGCACCCAGGACCTGTTCCTGCCCTTCTTCAGCAACGTGACCTGGTTCCACGCCATCCACGTGAGCGGCACCAACGGCACCAAGCGCTTCGACAACCCCGTGCTGCCCTTCAACGACGGCGTGTACTTCGCCAGCACCGAGAAGAGCAACATCATCCGGGGCTGGATCTTCGGCACCACCCTGGACAGCAAGACCCAGAGCCTGCTGATCGTGAACAACGCCACCAACGTGGTGATCAAGGTGTGCGAGTTCCAGTTCTGCAACGACCCCTTCCTGGGCGTGTACTACCACAAGAACAACAAGAGCTGGATGGAGAGCGAGTTCCGCGTGTACAGCAGCGCCAACAACTGCACCTTCGAGTACGTGAGCCAGCCCTTCCTGATGGACCTGGAGGGCAAGCAGGGCAACTTCAAGAACCTGCGCGAGTTCGTGTTCAAGAACATCGACGGCTACTTCAAGATCTACAGCAAGCACACCCCCATCAACCTGGTGCGGGACCTGCCCCAGGGCTTCAGCGCCCTGGAGCCCCTGGTGGACCTGCCCATCGGCATCAACATCACCCGCTTCCAGACCCTGCTGGCCCTGCACCGGAGCTACCTGACCCCCGGCGACAGCAGCAGCGGCTGGACCGCCGGCGCCGCCGCCTACTACGTGGGCTACCTGCAGCCCCGGACCTTCCTGCTGAAGTACAACGAGAACGGCACCATCACCGACGCCGTGGACTGCGCCCTGGACCCCCTGAGCGAGACCAAGTGCACCCTGAAGAGCTTCACCGTGGAGAAGGGCATCTACCAGACCAGCAACTTCCGCGTGCAGCCCACCGAGAGCATCGTGCGCTTCCCCAACATCACCAACCTGTGCCCCTTCGGCGAGGTGTTCAACGCCACCCGCTTCGCCAGCGTGTACGCCTGGAACCGCAAGCGCATCAGCAACTGCGTGGCCGACTACAGCGTGCTGTACAACAGCGCCAGCTTCAGCACCTTCAAGTGCTACGGCGTGAGCCCCACCAAGCTGAACGACCTGTGCTTCACCAACGTGTACGCCGACAGCTTCGTGATCCGGGGCGACGAGGTGCGGCAGATCGCCCCCGGCCAGACCGGCAAGATCGCCGACTACAACTACAAGCTGCCCGACGACTTCACCGGCTGCGTGATCGCCTGGAACAGCAACAACCTGGACAGCAAGGTGGGCGGCAACTACAACTACCTGTACCGGCTGTTCCGCAAGAGCAACCTGAAGCCCTTCGAGCGGGACATCAGCACCGAGATCTACCAGGCCGGCAGCACCCCCTGCAACGGCGTGGAGGGCTTCAACTGCTACTTCCCCCTGCAGAGCTACGGCTTCCAGCCCACCAACGGCGTGGGCTACCAGCCCTACCGCGTGGTGGTGCTGAGCTTCGAGCTGCTGCACGCCCCCGCCACCGTGTGCGGCCCCAAGAAGAGCACCAACCTGGTGAAGAACAAGTGCGTGAACTTCAACTTCAACGGCCTGACCGGCACCGGCGTGCTGACCGAGAGCAACAAGAAGTTCCTGCCCTTCCAGCAGTTCGGCCGCGACATCGCCGACACCACCGACGCCGTGCGGGACCCCCAGACCCTGGAGATCCTGGACATCACCCCCTGCAGCTTCGGCGGCGTGAGCGTGATCACCCCCGGCACCAACACCAGCAACCAGGTGGCCGTGCTGTACCAGGACGTGAACTGCACCGAGGTGCCCGTGGCCATCCACGCCGACCAGCTGACCCCCACCTGGCGCGTGTACAGCACCGGCAGCAACGTGTTCCAGACCCGCGCCGGCTGCCTGATCGGCGCCGAGCACGTGAACAACAGCTACGAGTGCGACATCCCCATCGGCGCCGGCATCTGCGCCAGCTACCAGACCCAGACCAACAGCCCCCGGCGGGCCCGGAGCGTGGCCAGCCAGAGCATCATCGCCTACACCATGAGCCTGGGCGCCGAGAACAGCGTGGCCTACAGCAACAACAGCATCGCCATCCCCACCAACTTCACCATCAGCGTGACCACCGAGATCCTGCCCGTGAGCATGACCAAGACCAGCGTGGACTGCACCATGTACATCTGCGGCGACAGCACCGAGTGCAGCAACCTGCTGCTGCAGTACGGCAGCTTCTGCACCCAGCTGAACCGCGCCCTGACCGGCATCGCCGTGGAGCAGGACAAGAACACCCAGGAGGTGTTCGCCCAGGTGAAGCAGATCTACAAGACCCCACCCATCAAGGACTTCGGCGGCTTCAACTTCAGCCAGATCCTGCCCGACCCCAGCAAGCCCAGCAAGCGGAGCTTCATCGAGGACCTGCTGTTCAACAAGGTGACCCTGGCCGACGCCGGCTTCATCAAGCAGTACGGCGACTGCCTGGGCGACATCGCCGCCCGGGACCTGATCTGCGCCCAGAAGTTCAACGGCCTGACCGTGCTGCCCCCGCTGCTGACCGACGAGATGATCGCCCAGTACACCAGCGCCCTGCTGGCCGGCACCATCACCAGCGGCTGGACCTTCGGCGCCGGCGCCGCCCTGCAGATCCCCTTCGCCATGCAGATGGCCTACCGCTTCAACGGCATCGGCGTGACCCAGAACGTGCTGTACGAGAACCAGAAGCTGATCGCCAACCAGTTCAACAGCGCCATCGGCAAGATCCAGGACAGCCTGAGCAGCACCGCCAGCGCCCTGGGCAAGCTGCAGGACGTGGTGAACCAGAACGCCCAGGCCCTGAACACCCTGGTGAAGCAGCTGAGCAGCAACTTCGGCGCCATCAGCAGCGTGCTGAACGACATCCTGAGCCGGCTGGACAAGGTGGAGGCCGAGGTGCAGATCGACCGGCTGATCACCGGCCGGCTGCAGAGCCTGCAGACCTACGTGACCCAGCAGCTGATCCGCGCCGCCGAGATCCGCGCCAGCGCCAACCTGGCCGCCACCAAGATGAGCGAGTGCGTGCTGGGCCAGAGCAAGCGCGTGGACTTCTGCGGCAAGGGCTACCACCTGATGAGCTTCCCCCAGAGCGCCCCCCACGGCGTGGTGTTCCTGCACGTGACCTACGTGCCCGCCCAGGAGAAGAACTTCACCACCGCCCCCGCCATCTGCCACGACGGCAAGGCCCACTTCCCCCGCGAGGGCGTGTTCGTGAGCAACGGCACCCACTGGTTCGTGACCCAGCGGAACTTCTACGAGCCCCAGATCATCACCACCGACAACACCTTCGTGAGCGGCAACTGCGACGTGGTGATCGGCATCGTGAACAACACCGTGTACGACCCCCTGCAGCCCGAGCTGGACAGCTTCAAGGAGGAGCTGGACAAGTACTTCAAGAACCACACCAGCCCCGACGTGGACCTGGGCGACATCAGCGGCATCAACGCCAGCGTGGTGAACATCCAGAAGGAGATCGACCGGCTGAACGAGGTGGCCAAGAACCTGAACGAGAGCCTGATCGACCTGCAGGAGCTGGGCAAGTACGAGCAGTACATCAAGTGGCCCTGGTACATCTGGCTGGGCTTCATCGCCGGCCTGATCGCCATCGTGATGGTGACCATCATGCTGTGCTGCATGACCAGCTGCTGCAGCTGCCTGAAGGGCTGCTGCAGCTGCGGCAGCTGCTGCAAGTTCGACGAGGACGACAGCGAGCCCGTGCTGAAGGGCGTGAAGCTGCACTACACCTGA'''

#Codon Match 76.30  Nucleotide Match 90.24
mine_without_bias = '''
ATGTTCGTGTTCCTGGTGCTGCTGCCCCTGGTGAGCAGCCAGTGCGTGAACCTGACCACCAGGACCCAGCTGCCCCCAGCCTACACCAACAGCTTCACCAGGGGCGTGTACTACCCCGACAAGGTGTTTCGGAGCAGCGTGCTGCACAGCACCCAGGACCTGTTCCTGCCCTTCTTCAGCAACGTGACCTGGTTCCACGCCATCCACGTGAGCGGCACCAACGGCACCAAGCGCTTCGACAACCCCGTGCTGCCCTTCAACGACGGCGTGTACTTCGCCAGCACCGAGAAGAGCAACATCATCCGCGGCTGGATCTTCGGCACCACCCTGGACAGCAAGACCCAGAGCCTGCTGATCGTGAACAACGCCACCAACGTGGTGATCAAGGTGTGCGAGTTCCAGTTCTGCAACGACCCCTTCCTGGGCGTGTACTACCACAAGAATAATAAATCTTGGATGGAGAGCGAGTTCCGCGTGTACAGCAGCGCCAACAACTGCACCTTCGAGTACGTGTCCCAGCCCTTCCTGATGGACCTGGAGGGCAAGCAGGGCAACTTCAAGAACCTGCGCGAGTTCGTGTTCAAGAACATCGACGGCTACTTCAAGATCTACAGTAAACATACTCCCATCAACCTGGTGCGCGACCTGCCCCAGGGCTTCAGCGCCCTGGAGCCCCTGGTGGACCTGCCCATCGGCATCAACATCACCCGCTTCCAGACCCTGCTGGCCCTGCACCGGAGCTACCTGACCCCCGGCGACAGCAGCAGCGGCTGGACCGCCGGCGCCGCCGCCTACTACGTGGGCTACCTGCAGCCCAGGACCTTCCTGCTGAAGTACAACGAGAACGGCACCATCACCGACGCCGTGGACTGCGCCCTGGACCCCCTGAGCGAGACCAAGTGCACCCTGAAGAGCTTCACCGTGGAGAAGGGCATCTACCAGACCAGCAACTTCCGCGTGCAGCCCACCGAGAGCATCGTGCGCTTCCCCAACATCACCAACCTGTGCCCCTTCGGCGAGGTGTTCAACGCCACCCGCTTCGCCAGCGTGTACGCCTGGAATAGAAAAAGAATTTCTAATTGTGTGGCCGACTACAGCGTGCTGTACAACAGCGCCAGCTTCAGCACCTTCAAGTGCTACGGCGTGAGCCCCACCAAGCTGAACGACCTGTGCTTCACCAACGTGTACGCCGACAGCTTCGTGATCCGCGGCGACGAGGTGCGGCAGATCGCCCCCGGCCAGACCGGCAAGATCGCCGACTACAACTACAAGCTGCCCGACGACTTCACCGGCTGCGTGATCGCCTGGAACAGCAACAACCTGGACAGCAAGGTGGGCGGCAACTACAACTACCTGTACCGGCTGTTCCGCAAGAGCAACCTGAAGCCCTTCGAGCGGGACATCAGCACCGAGATCTACCAGGCCGGCAGCACCCCCTGCAACGGCGTGGAGGGCTTCAACTGCTACTTCCCCCTGCAGAGCTACGGCTTCCAGCCCACCAACGGCGTGGGCTACCAGCCCTACCGCGTGGTGGTGCTGAGCTTCGAGCTGCTGCACGCCCCCGCCACCGTGTGCGGCCCCAAGAAGAGCACCAACCTGGTGAAGAATAAATGTGTGAACTTCAACTTCAACGGGCTGACCGGCACCGGCGTGCTGACCGAGAGCAACAAGAAGTTCCTGCCCTTCCAGCAGTTCGGCCGCGACATCGCCGACACCACCGACGCCGTGCGCGACCCCCAGACCCTGGAGATCCTGGACATCACCCCCTGCAGCTTCGGCGGCGTGTCCGTGATCACCCCCGGCACCAACACCAGCAACCAGGTGGCCGTGCTGTACCAGGACGTGAACTGCACCGAGGTGCCCGTGGCCATCCACGCCGACCAGCTGACCCCAACATGGCGCGTGTACAGCACCGGCAGCAACGTGTTCCAGACCCGCGCCGGCTGCCTGATCGGCGCCGAGCACGTGAACAACAGCTACGAGTGCGACATCCCCATCGGCGCCGGCATCTGCGCCAGCTACCAGACCCAGACCAACAGCCCCCGGCGCGCCCGGAGCGTGGCCAGCCAGAGCATCATCGCCTACACCATGAGCCTGGGCGCCGAGAACAGCGTGGCCTACAGCAACAACAGCATCGCCATCCCCACCAACTTCACCATCAGCGTGACCACCGAGATCCTGCCCGTGTCCATGACCAAGACCAGCGTGGACTGCACCATGTACATCTGCGGCGACAGCACCGAGTGCAGCAACCTGCTGCTGCAGTACGGCAGCTTCTGCACCCAGCTGAACCGCGCCCTGACCGGCATCGCCGTGGAGCAGGACAAGAACACCCAGGAGGTGTTCGCCCAGGTGAAGCAGATCTACAAGACACCACCCATCAAGGACTTCGGCGGCTTCAACTTCAGCCAGATCCTGCCCGACCCCAGCAAGCCCAGCAAGAGGAGCTTCATCGAGGACCTGCTGTTCAACAAGGTGACCCTGGCCGACGCCGGCTTCATCAAGCAGTACGGCGACTGCCTGGGCGACATCGCCGCCCGGGACCTGATCTGCGCCCAGAAGTTCAACGGGCTGACCGTGCTGCCCCCGCTGCTGACCGACGAGATGATCGCCCAGTACACCAGCGCCCTGCTGGCCGGCACCATCACCAGCGGCTGGACCTTCGGCGCCGGCGCCGCCCTGCAGATCCCCTTCGCCATGCAGATGGCCTACCGCTTCAACGGCATCGGCGTGACCCAGAACGTGCTGTACGAGAACCAGAAGCTGATCGCCAACCAGTTCAACAGCGCCATCGGCAAGATCCAGGACAGCCTGAGCAGCACCGCCAGCGCCCTGGGCAAGCTGCAGGACGTGGTGAACCAGAACGCCCAGGCCCTGAACACCCTGGTGAAGCAGCTGAGCAGCAACTTCGGCGCCATCAGCAGCGTGCTGAACGACATCCTGAGCCGGCTGGACAAGGTGGAGGCCGAGGTGCAGATCGACCGGCTGATCACCGGCCGGCTGCAGAGCCTGCAGACCTACGTGACCCAGCAGCTGATCCGCGCCGCCGAGATCCGCGCCAGCGCCAACCTGGCCGCCACCAAGATGAGCGAGTGCGTGCTGGGCCAGAGCAAGCGCGTGGACTTCTGCGGCAAGGGCTACCACCTGATGAGCTTCCCCCAGAGCGCCCCCCACGGCGTGGTGTTCCTGCACGTGACCTACGTGCCCGCCCAGGAGAAGAACTTCACCACCGCCCCCGCCATCTGCCACGACGGCAAGGCCCACTTCCCCCGCGAGGGCGTGTTCGTGTCCAACGGCACCCACTGGTTCGTGACCCAGCGGAACTTCTACGAGCCCCAGATCATCACCACCGACAACACCTTCGTGAGCGGCAACTGCGACGTGGTGATCGGCATCGTGAACAACACCGTGTACGACCCCCTGCAGCCCGAGCTGGACAGCTTCAAGGAGGAGCTGGACAAGTACTTCAAGAACCACACCAGCCCCGACGTGGACCTGGGCGACATCAGCGGCATCAACGCCAGCGTGGTGAACATCCAGAAGGAGATCGACCGGCTGAACGAGGTGGCCAAGAACCTGAACGAGAGCCTGATCGACCTGCAGGAGCTGGGCAAGTACGAGCAGTACATCAAGTGGCCCTGGTACATCTGGCTGGGCTTCATCGCCGGCCTGATCGCCATCGTGATGGTGACCATCATGCTGTGCTGCATGACCAGCTGCTGCAGCTGCCTGAAGGGCTGCTGCAGCTGCGGCAGCTGCTGCAAGTTCGACGAGGACGACAGCGAGCCCGTGCTGAAGGGCGTGAAGCTGCACTACACCTGA'''


with open('output.txt', 'w') as f:
    print("\nCOV vs BNT", file=f)
    compare_seq(cov19, BNT162b2, f)

    print("\nCOV vs Mine", file=f)
    compare_seq(cov19, mine, f)

    print("\nBNT vs Mine", file=f)
    print(vit.should_replace, file=f)
    compare_seq(BNT162b2, mine, f)

    tp2 = tp[np.nonzero(tp)]
    print("Codon transition stats:", file=f)
    print("min {} max {} mean {}".format(np.min(tp2), np.max(tp2), np.mean(tp2)), file=f)

plt.plot(tp)
plt.show()

pass